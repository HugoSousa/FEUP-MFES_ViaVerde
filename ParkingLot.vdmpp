class ParkingLot is subclass of Service
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private entrances : set of Node;
	private exits : set of Node;
	private price : real;
	
operations
	public ParkingLot : set of Node * set of Node * real ==> ParkingLot
	 ParkingLot(ins, outs, pr) == (
	 	entrances := ins;
	 	exits := outs;
	 	price := pr;
		return self;
	)
	pre
		ins inter outs = {}; --nao existem nos de entrada e saida simultaneamente
	
	public getAllNodes : () ==> set of Node
	getAllNodes() == (
    return entrances union exits;
	);
	
	
	
	-- TODO precodicao so podem entrar carros e motas
	public passa : Client * Node * Time * [Record] ==> real
	passa(-, node, time, last_record) == (
		-- if (last_record = nil) then return -1;
		if(node in set entrances) then return 0;

		return Time`Diff(time, last_record.time) * price;
		
	)
	-- tem de sair depois de entrar / nao pode entrar 2 vezes no parque sem sair
	pre
		(
			node in set exits
			and
			last_record <> nil 
			and
			last_record.node in set entrances
			and
			Time`compareTimes(time.timestamp, last_record.time.timestamp) > 0
		)
		or
		(
			node in set entrances
			and 
			(
				last_record = nil
			)
			or
			(
				last_record <> nil
				and
				not last_record.node in set entrances
			)
		)
		;
	
	
	
functions
-- TODO Define functiones here

traces
-- TODO Define Combinatorial Test Traces here
end ParkingLot