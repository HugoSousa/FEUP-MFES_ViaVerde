class Main
types

values

	
instance variables
-- TODO Define instance variables here
operations

	public static Run : () ==> bool
  Run()  ==
    (
			Test();
    );
    
  public static Test : () ==> bool
  Test() ==
  (
  	dcl viaVerde : ViaVerde;
  	dcl brisa: ServiceProvider;
  	dcl c1: Client;
  	dcl entrada_parque : Node;
  	dcl entrada_parque2 : Node;
  	dcl saida_parque : Node;
  	dcl parque1 : Service;
  	dcl time: Time;
  	dcl time2: Time;
  	dcl time3: Time;
  	dcl time4: Time;
  	dcl AE_entrou: HighwayNode;
  	dcl AE_saiu: HighwayNode;
  	
  	
  	time := new Time(12);
  	time2 := new Time(15);
  	time3 := new Time(18);
  	time3 := new Time(25);
  	viaVerde := new ViaVerde();
  	
  	--viaVerde.highway_prices := highway_prices;
  	
  	c1 := new Client(<C1>, "francisco", 281923918);
  	viaVerde.addClient(c1);
  	
  	brisa := new ServiceProvider(1, "Brisa");
  	entrada_parque := new Node(1,1);
  	entrada_parque2 := new Node(3,3);
  	saida_parque := new Node(2,2);
  	
  	parque1 := new ParkingLot({entrada_parque, entrada_parque2}, {saida_parque}, 2.3);
  	brisa.addService(parque1);
  	
  	--TODO ao adicionar serviceProvider, assegurar que nao existe (variavel modificada num if VS invariant a verificar um a um)
  	--TODO fazer o check ao adicionar serviceProvider que nenhum dos nos adicionados dentro esta a ser usado noutro serviceProdiver
  	viaVerde.addServiceProvider(brisa);
  	viaVerde.passa(c1, entrada_parque, time);
  	--viaVerde.passa(c1, entrada_parque2, time2);
  	viaVerde.passa(c1, saida_parque, time2); --erro, nao passou numa entrada
   	
   	-- exemplo de tabela de precos de auto-estradas
   	AE_entrou := new HighwayNode(5,5, <ENTRANCE>);
   	AE_saiu := new HighwayNode(6,6, <EXIT>);
   		
		viaVerde.highway_prices := 
		{ 
			mk_ViaVerde`OriginDestiny(AE_entrou, AE_saiu) |-> {<C1> |-> 4.2, <C2> |-> 5.6}
		};
		--viaVerde.passa(c1, AE_saiu, time3);
  	viaVerde.passa(c1, AE_entrou, time3);
  	
  	IO`println(viaVerde.distance(mk_Node`Local(1,2), mk_Node`Local(2,3)));
  	
  	return true;
  )
  
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Main