class ViaVerde

  types
  	public Nome = seq1 of char;
  	
    -- public clientes = Cliente;
  values
    
	instance variables
	  private clients : set of Client := {};
	  private service_providers : set of ServiceProvider := {};
  	--inv not exists node in set getAllNodes() & card node > 1;
  
  --operations
  operations
  
  --adiciona um cliente
  public addClient(cliente: Client) ==
  (
    clients := clients union {cliente};
    IO`println(clients);
  )
    post 
     	clients <> {};
  
  --remove um cliente   	
  public removeClient(cliente: Client) == 
  ( 	
  	--IO`println(cliente.name);
  	--clientes := clientes \ {cliente};
  	--percorrer o set e comparar o nome
  	dcl c1 : Client;
  	c1 := iota c in set clients & c.id = cliente.id;
  	
		clients := clients \ {c1};
		
		IO`println(clients);
  );
	
	--adiciona uma parceria com um fornecedor de servicos (parque estacionamento, auto-estradas, etc.)
	public addServiceProvider(provider: ServiceProvider) == (
		service_providers := service_providers union {provider};
    IO`println(service_providers);
	);
		

	--remove uma parceria com um fornecedor de servicos
	public removeServiceProvider(provider: ServiceProvider) == 
  ( 	
  	dcl sp1 : ServiceProvider;
  	sp1 := iota sp in set service_providers & sp.id = provider.id;
  	
		service_providers := service_providers \ {sp1};
		
		IO`println(clients);
  );
  
  public getAllNodes : () ==> set of Node
	 getAllNodes() == (
	 	dcl all_nodes: set of Node := {};
	 	
	 	for all service_provider in set service_providers do
    	all_nodes := all_nodes union service_provider.getAllNodes();
    	
  	return all_nodes;
	 );

functions
   
end ViaVerde
