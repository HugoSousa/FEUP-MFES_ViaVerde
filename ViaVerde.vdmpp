class ViaVerde

  types
  	public Nome = seq1 of char;
  	
  	public OriginDestiny :: origin: HighwayNode
  													destination: HighwayNode;
  													
		public CostByClass = map Client`class_v to real;
		
		public Invoice :: month: nat1
											price: real
											paid: bool;
											
  values
  	--limite imaginario de unidades de distancia que um veiculo se pode deslocar por unidade de tempo 
		public MAX_SPEED = 3;  
		
	instance variables
	
		--tabela de preços tem de estar no sistema, pois é possivel intercalar em auto-estradas de diferentes concessionárias
		public highway_prices : map OriginDestiny to CostByClass := { |-> };
	
	  public clients : set of Client := {};
	  public service_providers : set of ServiceProvider := {};
	  public records : map Client to seq of Record := { |-> };
	  public invoices: map Client to seq of Invoice := { |-> };
	  public month: nat1 := 1;
	    	
  	--month entre 1 e 12
  	inv month >= 1 and month <= 12;
  	
  --operations
  operations
   
  --adiciona um cliente
  public addClient(client: Client) ==
  (
    clients := clients union {client};
    records := records munion {client |-> []};
    invoices := invoices munion {client |-> []};
  )
  pre
  	not client in set clients
  post 
   	clients <> {};
  
  --remove um cliente   	
  public removeClient(client: Client) == 
  ( 	
		clients := clients \ {client};
  )
  pre
  	client in set clients;
	
	--adiciona uma parceria com um fornecedor de servicos (parque estacionamento, auto-estradas, etc.)
	public addServiceProvider(provider: ServiceProvider) == (
		
		Condition`assertTrue(
    	provider.getAllNodes() inter getAllNodes() = {}
    );
	
		service_providers := service_providers union {provider};

	)
	pre
		not provider in set service_providers;
	
	
		
	--TODO o cliente tem de estar adicionado no sistema
	public passa(client: Client, node : Node, time: Time) == (
	  dcl estab : [ServiceProvider] := nil;
	  dcl cost : real;
	  dcl new_record : Record;
	  dcl last_record : [Record] := nil;
	  dcl client_records : seq of Record;
	  time.setMonth(month);
		--se for HighwayNode, tem de passar numa entrada antes de passar na saida
		--se o par entrada-saida nao existe na tabela de preços, e um par invalido
	  Condition`assertTrue(
		  (
		  	(
			  	isofclass(HighwayNode, node) 
					and 
					(
						let n  = narrow_(node,HighwayNode) in 
						(
							(
								n.type = <EXIT>
								and
								getLastHighwayRecord(client) <> nil
								and
								let n1 = narrow_(getLastHighwayRecord(client).node, HighwayNode) in 
								n1.type = <ENTRANCE>
								and 
								mk_OriginDestiny(n1, n) in set dom highway_prices
							)
							or
							(
								n.type = <ENTRANCE>
							)
						)
					)
				)
				or (not isofclass(HighwayNode, node))
				
			)
		);
		
		if(len records(client) > 0) then
			last_record := records(client)(len records(client));
		--teste espaço-temporal, nao pode passar em 2 locais numa distancia de tempo "impossivel". velocidade teorica maxima atribuida em MAX_SPEED
		--nova passagem tem de ser mais recente que a ultima
		Condition`assertTrue(
			last_record = nil
			or
			(
				last_record <> nil
				and
			  (distance(node.local, last_record.node.local) / (time.timestamp - last_record.time.timestamp)) <= MAX_SPEED
			  and time.timestamp > last_record.time.timestamp
		  )
		);
	  
	  if (isofclass(HighwayNode, node)) then
		(	
			dcl hn : HighwayNode;
			last_record := getLastHighwayRecord(client);
			hn := node;
			if(hn.type = <ENTRANCE>) then
		 	(
			 cost:= 0.0;
		 	)
			else
			(
				dcl entrance_node : HighwayNode;
				entrance_node := last_record.node;
				cost := highway_prices(mk_OriginDestiny(entrance_node , hn))(client.class_vehicle);
			);
		)
  	else
	 	(
	 		estab := getServiceProviderByNode(node);
		  			   
		  last_record := getLastRecord(client, estab);
	 	
	 		cost := estab.passa(client, node, time, last_record)
	 	);
  	
		client_records := records(client);
		new_record := new Record(client, node, time, estab, cost);
		client_records := client_records ^ [new_record];
		records := records ++ { client |-> client_records };
		--IO`println("AFTER RECORDS: " ^ records(client));
		
	)
	pre
	(
		client in set clients
	);

	--remove uma parceria com um fornecedor de servicos
	public removeServiceProvider(provider: ServiceProvider) == 
  ( 	
		service_providers := service_providers \ {provider};
  )
  pre
  	provider in set service_providers;
  
  
  public getAllNodes : () ==> set of Node
	 getAllNodes() == (
	 	dcl all_nodes: set of Node := {};
	 	
	 	for all service_provider in set service_providers do
    	all_nodes := all_nodes union service_provider.getAllNodes();
    	
  	return all_nodes;
	 );
		
	
	 public getServiceProviderByNode : Node ==> ServiceProvider
	 getServiceProviderByNode(node) == (
		
		dcl all_nodes : set of Node := {};
		dcl service_provider: ServiceProvider;
		
		for all sp in set service_providers do(
			all_nodes := sp.getAllNodes();
			if(node in set all_nodes) then 
				service_provider:= sp;
		);

  	return service_provider;
	 );
	 
	public getLastRecord : Client * ServiceProvider ==> [Record]
	getLastRecord(client, serviceProvider) == (
		dcl client_records : seq of Record;
		dcl last_record: [Record] := nil;
	  
	  client_records := records(client);
	  
	  for all c in set elems client_records do
  		if (serviceProvider = c.provider) then
  			last_record := c;
  			
  	return last_record;
	);
	
	public getLastHighwayRecord : Client ==> [Record]
	getLastHighwayRecord(client) == (
		/*let rc = records(client),
			  rch = [rc(i) | i in set inds rc & isofclass(HighwayNode, rc(i).node)]
		in return if rch = [] then nil else rch(len rch);*/
		
	  for r in reverse records(client) do
	  	if (isofclass(HighwayNode, r.node)) then
	  		return r;	 	
	  return nil; 
	);
	
	public incrementMonth : () ==> ()
 	incrementMonth() == (
	 	month := month + 1;
	 	for all client in set clients do
	 		sendInvoice(client);
 	);
 	
	public sendInvoice : Client ==> ()
 	sendInvoice(client) == (
 			dcl client_balance: real := 0.0;
 			dcl previous_month: int;
 			
 			if(month = 1) then
 				previous_month := 12
 			else
 				previous_month := month - 1;

 			for all record in set elems records(client) do
 				if(record.time.month = previous_month) then
 					client_balance := client_balance + record.cost;
 			
	 		invoices := invoices ++ {client |-> invoices(client) ^ [mk_Invoice(month - 1, client_balance, false)]};
 	);
 	
 	--pre condicao: a fatura tem de ter sido emitida ja (verificar cliente e mes)
	public payInvoice : Client * nat1 ==> ()
 	payInvoice(client, m) == (
 		dcl client_invoices : seq of Invoice := invoices(client);
 		
 		for index = len client_invoices to 1 do
			if(client_invoices(index).month = m) then
			(
				client_invoices := client_invoices ++ { index |-> mk_Invoice(client_invoices(index).month, client_invoices(index).price, true)};
				invoices := invoices ++ {client |-> client_invoices};
				return;
			);
 	);
	
functions
	public distance(l1: Node`Local, l2: Node`Local) res: real ==
    (
      MATH`sqrt((l2.latitude - l1.latitude)*(l2.latitude - l1.latitude) + (l2.longitude - l1.longitude)*(l2.longitude - l1.longitude))
    );
end ViaVerde
