class Main
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

	public static Run : () ==> bool
  Run()  ==
    (
			Test();
    );
    
  public static Test : () ==> bool
  Test() ==
  (
  	dcl viaVerde : ViaVerde;
  	dcl brisa: ServiceProvider;
  	dcl c1: Client;
  	dcl entrada_parque : Node;
  	dcl saida_parque : Node;
  	dcl parque1 : Service;
  	dcl time: Time;
  	dcl time2: Time;
  	
  	time := new Time(12);
  	viaVerde := new ViaVerde();
  	c1 := new Client(1, "francisco", 281923918);
  	viaVerde.addClient(c1);
  	
  	brisa := new ServiceProvider(1, "Brisa");
  	entrada_parque := new Node(new Local(1, 1));
  	saida_parque := new Node(new Local(2, 2));
  	
  	parque1 := new ParkingLot({entrada_parque}, {saida_parque}, 2.3);
  	brisa.addService(parque1);
  	
  	--TODO ao adicionar serviceProvider, assegurar que nao existe (variavel modificada num if VS invariant a verificar um a um)
  	--TODO fazer o check ao adicionar serviceProvider que nenhum dos nos adicionados dentro esta a ser usado noutro serviceProdiver
  	viaVerde.addServiceProvider(brisa);
  	viaVerde.passa(c1, entrada_parque, time); --erro, nao passou numa entrada
  	viaVerde.passa(c1, saida_parque, time); --erro, nao passou numa entrada
  	
  	
  	return true;
  )
  
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Main